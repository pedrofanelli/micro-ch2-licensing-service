#command: docker-compose up
# para cerrar , hacerlo desde la app de Docker

#version: '3'

#services:
#  licensingservice:
#    image: example/micro-ch2-licensing-service
#    ports:
#      - "8080:8080"
#    environment:
#       - "SPRING_PROFILES_ACTIVE=dev"
       
       
# IMPLEMENTAR BASE DE DATOS, CREO QUE ANDA, LO DIO CHATGPT    
version: '3'

services:
  #web:
    #image: nginx:latest
    #ports:
      #- "80:80"

# ENCRYPT_KEY=fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo docker-compose up
# otra forma es usando un .env file en el mismo lugar que docker-compose.yml
  configserver:
    image: example/micro-configserver:latest
    container_name: configuracion
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: ${ENCRYPT_KEY}
    networks:
      backend:
        aliases:
          - "configserver"

# docker exec -it 49a3a054fbe1 psql -U peter spring_practice
# el codigo es el id del container con la base, luego el user y db

  database:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "peter"
      #POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: "mypassword"
      POSTGRES_DB: "spring_practice"
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      #test: ["CMD-SHELL", "pg_isready -U postgres"]
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - database_data:/var/lib/postgresql/data

  eurekaserver:
    image: example/micro-eurekaserver:latest
    # le pongo aproposito otro nombre para distinguir mas cuando lo usamos en los url
    container_name: eurekaserv
    ports:
     - "8761:8761" 
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"
      
  gatewayserver:
    image: example/micro-gatewayserver:latest
    container_name: gateway
    ports:
     - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configuracion:8071"
      EUREKASERVER_URI: "http://eurekaserv:8761/eureka/"
      EUREKASERVER_PORT: "8761"
      CONFIGSERVER_PORT: "8071"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"
  
  # hay un conflicto con los puertos de zookeeper/kafka, por eso acá les puse otros puertos, 2186 y 9096 respectivamente
  # PERO al habilitarse en el container los activos son 2181 y 9092 respectivamente, medio confuso pero funciona
  # Además le cambie el puerto 8080 de Licensing Service por 8086 porque el 8080 colisiona con el ServerAdmin de Zookeeper
  # En el local lo cambiamos en la configuración, no hicimos lo mismo en Docker
  
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2186
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2186:2186
    networks:
      backend:
        aliases:
          - "zookeeper"
  
  kafkaserver:
    image: bitnami/kafka:latest
    container_name: kafkaserver
    ports:
      - 9096:9096
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9096
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      backend:
        aliases:
          - "kafka"
  
  redisserver:
    image: redis:alpine
    container_name: redisserver
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
      
  licensingservice:
    image: example/micro-ch2-licensing-service:latest
    container_name: licensing-service
    ports:
      - "8086:8086"
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      - backend
      
  organizationservice:
    image: example/micro-organization-service:latest
    container_name: organization-service
    ports:
      - "8081:8081"
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  database_data: 

###

# estaria armando una nueva base, por lo que los datos los puedo inventar, pero luego en la api debo usarlos!
