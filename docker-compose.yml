#command: docker-compose up
# para cerrar , hacerlo desde la app de Docker

#version: '3'

#services:
#  licensingservice:
#    image: example/micro-ch2-licensing-service
#    ports:
#      - "8080:8080"
#    environment:
#       - "SPRING_PROFILES_ACTIVE=dev"
       
       
# IMPLEMENTAR BASE DE DATOS, CREO QUE ANDA, LO DIO CHATGPT    
version: '3'

services:
  #web:
    #image: nginx:latest
    #ports:
      #- "80:80"

# ENCRYPT_KEY=fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo docker-compose up
# otra forma es usando un .env file en el mismo lugar que docker-compose.yml
  configserver:
    image: example/micro-configserver:latest
    container_name: configuracion
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: ${ENCRYPT_KEY}
    networks:
      backend:
        aliases:
          - "configserver"

# docker exec -it 49a3a054fbe1 psql -U peter spring_practice
# el codigo es el id del container con la base, luego el user y db

  database:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "peter"
      #POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: "mypassword"
      POSTGRES_DB: "spring_practice"
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      #test: ["CMD-SHELL", "pg_isready -U postgres"]
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - database_data:/var/lib/postgresql/data

  
      
  licensingservice:
    image: example/micro-ch2-licensing-service:latest
    ports:
      - "8080:8080"
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      - backend

networks:
  backend:
    driver: bridge
volumes:
  database_data: 

###

# estaria armando una nueva base, por lo que los datos los puedo inventar, pero luego en la api debo usarlos!
