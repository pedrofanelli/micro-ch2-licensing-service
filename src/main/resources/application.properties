#auditevents	,	Exposes audit events information for the current application.
#beans	,	Displays a complete list of all the Spring beans in your application.
#caches	,	Exposes available caches.
#conditions	,	Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.
#configprops	,	Displays a collated list of all\u00A0@ConfigurationProperties.
#env	,	Exposes properties from Spring\u2019s\u00A0ConfigurableEnvironment.
#flyway	,	Shows any Flyway database migrations that have been applied.
#health	,	Shows application health information.
#httptrace	,	Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges).
#info	,	Displays arbitrary application info.
#integrationgraph	,	Shows the Spring Integration graph.
#loggers	,	Shows and modifies the configuration of loggers in the application.
#liquibase	,	Shows any Liquibase database migrations that have been applied.
#metrics	,	Shows \u2018metrics\u2019 information for the current application.
#mappings	,	Displays a collated list of all\u00A0@RequestMapping\u00A0paths.
#scheduledtasks	,	Displays the scheduled tasks in your application.
#sessions	,	Allows retrieval and deletion of user sessions from a Spring Session-backed session store. Not available when using Spring Session\u2019s support for reactive web applications.
#shutdown	,	Lets the application be gracefully shutdown.
#threaddump	,	Performs a thread dump.

##management.endpoints.web.base-path=/
#management.endpoints.web.exposure.include=*
#management.endpoints.enabled-by-default=true
#management.endpoint.health.enabled=true
#management.endpoint.health.show-details=always
#management.health.db.enabled=false
#management.health.diskspace.enabled=true
#management.endpoint.beans.enabled=true

# el nombre representa el application ID para Eureka!
# la instance ID se generaria automaticamente por cada instancia
spring.application.name=licensing-service
spring.profiles.active=dev
spring.config.import=configserver:http://localhost:8071
spring.main.allow-bean-definition-overriding=true
#en el caso de Docker, va el nombre del container y NO localhost (en el ejemplo, 'configuracion')

# resilience4j circuitBreaker

resilience4j.circuitbreaker.instances.licenseService.register-health-indicator=true
#This sets the size of the sliding window used by the circuit breaker to track the success and failure rates of calls.
resilience4j.circuitbreaker.instances.licenseService.sliding-window-size=10
#This specifies the minimum number of calls required within the sliding window before the circuit breaker can calculate the success or failure rate.
resilience4j.circuitbreaker.instances.licenseService.minimum-number-of-calls=5
#This sets the maximum number of calls allowed when the circuit breaker is in the half-open state. If this limit is exceeded, the circuit breaker transitions back to the open state.
resilience4j.circuitbreaker.instances.licenseService.permitted-number-of-calls-in-half-open-state=3
#This parameter enables or disables automatic transition from the open state to the half-open state when the wait duration in the open state has passed.
resilience4j.circuitbreaker.instances.licenseService.automatic-transition-from-open-to-half-open-enabled=true
#This determines the duration that the circuit breaker remains in the open state before transitioning to the half-open state. In this case, it is set to 5 seconds.
resilience4j.circuitbreaker.instances.licenseService.wait-duration-in-open-state=5s
#This sets the failure rate threshold in percentage. If the failure rate exceeds this threshold within the sliding window, the circuit breaker transitions to the open state.
resilience4j.circuitbreaker.instances.licenseService.failure-rate-threshold=50
#This parameter determines the size of the buffer used by the event consumer for tracking circuit breaker events.
resilience4j.circuitbreaker.instances.licenseService.event-consumer-buffer-size=10

management.health.circuitbreakers.enabled=true

resilience4j.circuitbreaker.instances.organizationService.register-health-indicator=true
resilience4j.circuitbreaker.instances.organizationService.sliding-window-size=10
resilience4j.circuitbreaker.instances.organizationService.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.organizationService.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.organizationService.automatic-transition-from-open-to-half-open-enabled=true

#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.max-thread-pool-size=1
#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.core-thread-pool-size=1
#Sets the capacity of the queue. The default value is 100.
#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.queue-capacity=1
#Sets the maximum time that idle threads will wait for new tasks before terminating. This happens when the number of threads is higher than the number of core threads. The default value is 20 ms.
#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.keep-alive-duration=20ms

# propiedades para tipo de semaforo en bulkhead
#Sets the maximum amount of time to block a thread when entering a bulkhead. The default value is 0.
resilience4j.bulkhead.instances.bulkheadLicenseService.max-wait-duration=10ms
#Sets the maximum number of concurrent calls allowed by the bulkhead. The default value is 25.
resilience4j.bulkhead.instances.bulkheadLicenseService.max-concurrent-calls=3

resilience4j.retry.instances.retryLicenseService.max-attempts=5
resilience4j.retry.instances.retryLicenseService.wait-duration=10000
resilience4j.retry.instances.retryLicenseService.retry-exceptions=java.util.concurrent.TimeoutException


#server.port=8086


#spring.cloud.stream.bindings.hola-in-0.group=licensingGroup

# comando para generar mensaje desde la consola en kafka
#kafka-console-producer --bootstrap-server localhost:9092 --topic consumer-topic

#spring.cloud.function.definition=consumerLicense
#spring.cloud.stream.bindings.consumerLicense-in-0.destination=consumer-topic
spring.cloud.stream.kafka.binder.brokers=localhost:9092


spring.cloud.function.definition=loggerSink
spring.cloud.stream.bindings.loggerSink-in-0.destination=consumer-topic-license
